/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SYMBOL 1
#define MOVE 2
#define FUNCTION 3
#define BLUETOOTH 4

/ {

        conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
  };

	keymap {
		compatible = "zmk,keymap";

		default_layer {
    bindings = <
&kp TAB        &kp Q      &kp W      &kp F        &kp P       &kp G      &mo BLUETOOTH       &kp RBKT  &kp J     &kp L       &kp U       &kp Y      &kp SEMI      &kp BSLH
&mo MOVE       &kp A      &kp R      &kp S        &kp T       &kp D      &trans              &kp EQUAL &kp H     &kp N       &kp E       &kp I      &kp O         &kp SQT
&mt LSHFT LPAR &kp Z      &kp X      &kp C        &kp V       &kp B      &trans              &kp ENTER &kp K     &kp M       &kp COMMA   &kp DOT    &kp FSLH      &mt RSHFT ENTER
&mo BLUETOOTH  &kp LGUI   &kp CAPSLOCK   &kp LALT             &kp LWIN   &mo SYMBOL          &lt FUNCTION SPC    &kp LCTRL             &kp LEFT    &kp DOWN   &kp UP        &kp RIGHT
>;
		};

    symbol_layer {
    bindings = <
&kp GRAVE    &kp PRCNT     &kp AMPS    &kp QMARK      &kp PLUS    &kp AT       &kp C_VOL_DN       &kp C_VOL_UP     &kp DLLR  &kp UNDER      &kp LBKT         &kp RBKT      &kp EXCL     &kp HASH
&kp TILDE    &kp FSLH      &kp LPAR    &kp EQUAL      &kp N0      &kp LBRC     &kp C_VOL_DN       &kp C_VOL_UP     &kp RBRC  &kp N1         &kp STAR         &kp RPAR      &kp MINUS    &kp CARET
&sk LSHFT    &kp N6        &kp N7      &kp N8         &kp N9      &kp PIPE     &kp C_MUTE         &none            &kp BSLH  &kp N2         &kp N3           &kp N4        &kp N5        &trans
&trans    &trans        &trans      &tog RAISE                    &trans       &kp DEL            &kp ENTER        &trans                   &trans           &trans        &trans        &trans
>;
    };

    move_layer {
    bindings = <
&trans     &kp INS      &kp PSCRN  &kp LC(PGUP) &kp LC(PGDN) &trans    &trans              &trans   &trans    &trans    &trans    &trans     &kp LA(N0)  &kp LA(BSLH)
&trans     &kp LALT     &kp GUI    &kp LSHFT    &kp LCTRL    &kp ESC   &kp LA(MINUS)       &trans   &kp PG_UP &trans    &kp UP    &trans     &trans      &trans
&trans     &kp K_UNDO   &kp K_CUT  &kp K_COPY   &kp K_PASTE  &trans    &trans              &trans   &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT  &kp BSPC    &kp DEL
&trans     &trans       &trans     &trans       &trans       &trans                        &kp LA(SPC)         &trans             &trans     &trans      &trans     &trans
>;
    };

    function_layer {
    bindings = <
&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &trans              &trans &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
&trans &trans &trans &trans &trans &trans &trans              &trans &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans          &trans &trans &trans &trans &trans &trans &trans
&trans       &trans &trans &trans        &trans &trans              &trans &trans        &trans &trans &trans &trans
>;
    };
    bluetooth_layer {
    bindings = <
&bt BT_SEL 0 &trans &trans &trans &trans &trans &trans              &trans &trans &trans &trans &trans &trans &out OUT_USB
&bt BT_SEL 1 &trans &trans &trans &trans &trans &trans              &trans &trans &trans &trans &trans &trans &out OUT_BLE
&bt BT_SEL 2 &trans &trans &trans &trans &trans &bt BT_CLR          &trans &trans &trans &trans &trans &trans &trans
&trans       &trans &trans &trans        &trans &trans              &trans &trans        &trans &trans &trans &trans
>;
    };
	};
};
